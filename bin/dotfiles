#!/usr/bin/env bash

BIN_NAME=$(basename "$0")
COMMAND_NAME=$1
SUB_COMMAND_NAME=$2

sub_help () {
  echo "Usage: $BIN_NAME <command>"
  echo
  echo "Commands:"
  echo "   help             This help message"
  echo "   clean            Clean various caches"
  echo "   edit             Open dotfiles in editor ($EDITOR_NOWAIT)"
  echo "   update           Update packages and pkg managers (OS, brew, npm, gem)"
  echo "   install          Runs scripts within the install folder"
}

sub_edit () {
  sh -c "$EDITOR_NOWAIT $DOTFILES_DIR"
}

sub_update () {
  mas outdated
  mas upgrade
  brew update
  brew upgrade
  npm outdated -g --depth=0
  npm install --global yarn@latest
  for package in $(npm outdated -g --depth=0 --parseable | cut -d: -f4)
    do yarn global add "$package";
  done
  gem update --system
  gem update
  pip freeze --local | grep -v '^\-e' | cut -d = -f 1  | xargs pip install -U
  brew doctor
}

sub_clean () {
  brew cleanup
  brew cask cleanup
  # rvm cleanup all
  nvm clear-cache
  brew doctor
}

sub_install () {
  local SCRIPT="$DOTFILES_DIR/install/$SUB_COMMAND_NAME.sh"
  [ -f "$SCRIPT" ] && source "$SCRIPT" || echo "Unable to find script to install $SUB_COMMAND_NAME"
}

# Make sure to keep this in sync with the available public commands
sub_completion () {
  echo "help edit clean update install"
}

case $COMMAND_NAME in
  "" | "-h" | "--help")
    sub_help
    ;;
  *)
    shift
    sub_${COMMAND_NAME} $@
    if [ $? = 127 ]; then
      echo "'$COMMAND_NAME' is not a known command or has errors." >&2
      sub_help
      exit 1
    fi
    ;;
esac
